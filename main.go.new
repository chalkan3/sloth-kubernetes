package main

import (
	"encoding/base64"

	"github.com/pulumi/pulumi-oci/sdk/v2/go/oci/core"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		// Load configuration
		cfg := config.New(ctx, "")

		// Get instance configuration from Pulumi config
		compartmentId := cfg.Require("compartmentId")
		availabilityDomain := cfg.Require("availabilityDomain")
		shape := cfg.Require("shape")
		imageId := cfg.Require("imageId")
		name := cfg.Require("name")
		userDataScript := cfg.Require("userData")
		var ports []interface{}
		cfg.RequireObject("ports", &ports)

		// Create a VCN (Virtual Cloud Network)
		vcn, err := core.NewVcn(ctx, "vcn", &core.VcnArgs{
			CompartmentId: pulumi.String(compartmentId),
			CidrBlock:     pulumi.String("10.0.0.0/16"),
			DisplayName:   pulumi.String("pulumi-vcn"),
			DnsLabel:      pulumi.String("pulumivcn"),
		})
		if err != nil {
			return err
		}

		// Create an Internet Gateway
		internetGateway, err := core.NewInternetGateway(ctx, "internet-gateway", &core.InternetGatewayArgs{
			CompartmentId: pulumi.String(compartmentId),
			VcnId:         vcn.ID(),
			DisplayName:   pulumi.String("pulumi-igw"),
			Enabled:       pulumi.Bool(true),
		})
		if err != nil {
			return err
		}

		// Create a Route Table
		routeTable, err := core.NewRouteTable(ctx, "route-table", &core.RouteTableArgs{
			CompartmentId: pulumi.String(compartmentId),
			VcnId:         vcn.ID(),
			DisplayName:   pulumi.String("pulumi-route-table"),
			RouteRules: core.RouteTableRouteRuleArray{
				&core.RouteTableRouteRuleArgs{
					NetworkEntityId: internetGateway.ID(),
					Destination:     pulumi.String("0.0.0.0/0"),
					DestinationType: pulumi.String("CIDR_BLOCK"),
				},
			},
		})
		if err != nil {
			return err
		}

		// Build ingress rules from ports config
		var ingressRules core.SecurityListIngressSecurityRuleArray
		for _, port := range ports {
			portNum := int(port.(float64))
			ingressRules = append(ingressRules, &core.SecurityListIngressSecurityRuleArgs{
				Protocol: pulumi.String("6"), // TCP
				Source:   pulumi.String("0.0.0.0/0"),
				TcpOptions: &core.SecurityListIngressSecurityRuleTcpOptionsArgs{
					Min: pulumi.Int(portNum),
					Max: pulumi.Int(portNum),
				},
			})
		}

		// Create a Security List
		securityList, err := core.NewSecurityList(ctx, "security-list", &core.SecurityListArgs{
			CompartmentId: pulumi.String(compartmentId),
			VcnId:         vcn.ID(),
			DisplayName:   pulumi.String("pulumi-security-list"),
			EgressSecurityRules: core.SecurityListEgressSecurityRuleArray{
				&core.SecurityListEgressSecurityRuleArgs{
					Protocol:    pulumi.String("all"),
					Destination: pulumi.String("0.0.0.0/0"),
				},
			},
			IngressSecurityRules: ingressRules,
		})
		if err != nil {
			return err
		}

		// Create a Subnet
		subnet, err := core.NewSubnet(ctx, "subnet", &core.SubnetArgs{
			CompartmentId:      pulumi.String(compartmentId),
			VcnId:              vcn.ID(),
			CidrBlock:          pulumi.String("10.0.1.0/24"),
			DisplayName:        pulumi.String("pulumi-subnet"),
			DnsLabel:           pulumi.String("pulumisubnet"),
			RouteTableId:       routeTable.ID(),
			SecurityListIds:    pulumi.StringArray{securityList.ID()},
			AvailabilityDomain: pulumi.String(availabilityDomain),
		})
		if err != nil {
			return err
		}

		// Use userData from config
		userData := pulumi.String(userDataScript)

		// Create instance args
		instanceArgs := &core.InstanceArgs{
			CompartmentId:      pulumi.String(compartmentId),
			AvailabilityDomain: pulumi.String(availabilityDomain),
			Shape:              pulumi.String(shape),
			DisplayName:        pulumi.String(name),
			SourceDetails: &core.InstanceSourceDetailsArgs{
				SourceType: pulumi.String("image"),
				SourceId:   pulumi.String(imageId),
			},
			CreateVnicDetails: &core.InstanceCreateVnicDetailsArgs{
				SubnetId:       subnet.ID(),
				AssignPublicIp: pulumi.String("true"),
			},
			Metadata: pulumi.StringMap{
				"ssh_authorized_keys": pulumi.String("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDkqdqmL/LoxKqiwBhv147I8E0bsZI5eT5YbDyquyR2AongcPrEcOSmzipROe7tl7lORSY6wUTDP0gdhew5gQuhOZqaXfpDI9JVgNJCDOJxNZS3sVI6g+WBlWRg/yKQB/d3luArHkOjfcxbcknYRKUCFzAHD7VBIcz1PCDtMZD/9Ah/8M7T/40VlatxT7OyGTX886w7Y4HAihyHA4Z3YyTyxTjYNklqRZNsWgtpQ6WWGq60YGldwsEWidFtl53/ds3bQsdGITRDCLWpXyi3UZcD+ciyifwInjQ44PBosM6KwA6DnrAAAKtrCvpdploCWA7BVGW6DvJHoDDgREQfkTzepPCxBmcvLMQ8ZO8RDVDp54GR0nBz01N3tWidY5Z2sa7M7eCC01Y+3h5U/ASLsBtAgipFi5exi/rBI2BEGFmDwAAKUe692W0q24LhBFigCHJJ+xIiyTpAUGPO+vJBWGu8dQqHMetdrqHWihj64aUV/zKwosM4XYjyop0nCEIPqTs= chalkan3@MacBook-Air-de-Igor.local"),
				"user_data": userData.ToStringOutput().ApplyT(func(s string) string {
					return base64.StdEncoding.EncodeToString([]byte(s))
				}).(pulumi.StringOutput),
			},
		}

		// Add ShapeConfig for Flex shapes
		if shape == "VM.Standard.A1.Flex" {
			instanceArgs.ShapeConfig = &core.InstanceShapeConfigArgs{
				Ocpus:       pulumi.Float64(2),
				MemoryInGbs: pulumi.Float64(12),
			}
		}

		// Create the instance
		instance, err := core.NewInstance(ctx, "instance", instanceArgs)
		if err != nil {
			return err
		}

		// Export only public IP
		ctx.Export("publicIp", instance.PublicIp)

		return nil
	})
}
