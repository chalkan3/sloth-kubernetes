package main

import (
	"fmt"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"kubernetes-create/internal/orchestrator"
	"kubernetes-create/internal/validation"
	"kubernetes-create/pkg/config"
)

func main() {
	pulumi.Run(func(ctx *pulumi.Context) error {
		ctx.Log.Info("Starting Kubernetes cluster deployment", nil)

		// Load configuration from Pulumi
		cfg, err := config.LoadPulumiConfig(ctx)
		if err != nil {
			return fmt.Errorf("failed to load configuration: %w", err)
		}

		// Validate configuration
		if err := validation.ValidateClusterConfig(cfg); err != nil {
			return fmt.Errorf("configuration validation failed: %w", err)
		}

		// Create cluster orchestrator
		clusterOrch, err := orchestrator.NewSimpleRealOrchestratorComponent(ctx, "kubernetes-cluster", cfg)
		if err != nil {
			return fmt.Errorf("failed to create orchestrator: %w", err)
		}

		// Export cluster outputs
		exportClusterOutputs(ctx, clusterOrch, cfg)

		return nil
	})
}

// exportClusterOutputs exports all cluster information to Pulumi outputs
func exportClusterOutputs(ctx *pulumi.Context, orch *orchestrator.SimpleRealOrchestratorComponent, cfg *config.ClusterConfig) {
	ctx.Export("status", orch.Status)
	ctx.Export("clusterName", orch.ClusterName)
	ctx.Export("kubeConfig", orch.KubeConfig)
	ctx.Export("sshPrivateKey", orch.SSHPrivateKey)
	ctx.Export("sshPublicKey", orch.SSHPublicKey)
	ctx.Export("ssh_private_key", orch.SSHPrivateKey)
	ctx.Export("ssh_public_key", orch.SSHPublicKey)
	ctx.Export("ssh_private_key_path", pulumi.String("~/.ssh/kubernetes-clusters/production.pem"))
	ctx.Export("apiEndpoint", orch.APIEndpoint)

	// Connection instructions
	ctx.Export("connectionInstructions", pulumi.String(fmt.Sprintf(`
=== KUBERNETES CLUSTER DEPLOYED ===

Cluster: %s
API Endpoint: https://api.chalkan3.com.br:6443

1. Save kubeconfig:
   pulumi stack output kubeConfig --show-secrets > ~/.kube/config

2. Test cluster:
   kubectl get nodes

3. SSH to nodes:
   pulumi stack output sshPrivateKey --show-secrets > ~/.ssh/k8s.pem
   chmod 600 ~/.ssh/k8s.pem
   ssh -i ~/.ssh/k8s.pem root@<node-ip>

Status:
✅ WireGuard mesh VPN configured
✅ RKE2 Kubernetes deployed
✅ DNS records created
`, cfg.Metadata.Name)))
}
